wood:
  name: "Wood"
  version: "2.0snap4-b1"
  dev-build: false
  beta-build: true

build:
  x64: false
  # Build 64-bit executables. If false, only 32-bit executables will be built.
  PreTest: false
  # Test the program before building.
  AutoClean: false
  # Clean the build directory before building.
  AutoRun: false
  # Run the built program.

package:
  folders:
    - "mods"
    - "saves"

  excluded:
    - "*.py"
    - "*.pyc"
    - "*.pyw"

  included:
    - "include/*"

python:
  x64: "python"
  x86: "python"
  show-progress: true

nuitka: TODO

# https://pyinstaller.org/en/stable/usage.html#options
# https://pyinstaller.org/en/stable/usage.html#what-to-bundle-where-to-search
pyinstaller:
  cfg:
    command: "pyinstaller"
    # Command to use for PyInstaller
    app-name: "Wood"
    # Name to assign to the bundled app and spec file (default: first script’s basename)
    script: "../src/wood/Master.py"
    # Name of scriptfiles to be processed or exactly one .spec file.
    # If a .spec file is specified, most options are unnecessary and are ignored.
    icon: "NONE"
    # FILE.ico: apply the icon to a Windows executable.
    # FILE.exe,ID: extract the icon with ID from an exe.
    # FILE.icns: apply the icon to the .app bundle on Mac OS.
    # Image: apply the image to the executable.
    # Use “NONE” to not apply any icon, the OS shows a default (PyInstaller’s icon).
    # [!] If Pillow installed, tries to translate the the icon into the correct format.

  paths:
    output-path: "./output"
    # Where to put the bundled app (default: ./dist)
    work-path: "./tmp"
    # Where to put all the temporary work files, .log, .pyz and etc. (default: ./build)
    spec-path: "./spec"
    # Folder to store the generated spec file (default: current directory)
    contents-dir: "./library"
    # (ONEDIR) Specify the name of the directory in which all supporting files (i.e. everything except the executable itself) will be placed in. Use “.” to re-enable old onedir layout without contents directory.

  options:
    confirm-replace: true
    # Replace output directory (default: SPECPATH/dist/SPECNAME) without asking for confirmation
    clean: true
    # Clean PyInstaller cache and remove temporary files before building.
    onefile-mode: false
    # Create a one-file bundled executable.
    log-level: INFO
    # Amount of detail in build-time console messages. Default: INFO.
    # Levels: TRACE, DEBUG, INFO, WARN, DEPRECATION, ERROR, FATAL

  extra-data:
    # Additional data files or directories containing data files to be added to the application.
    # Example: "SOURCE:DEST_DIR"
    # To put a file in the top-level application directory, use . as a dest_dir.
    - ""

  extra-binary:
    # Additional binary files to be added to the executable.
    # Example: "SOURCE:DEST_DIR"
    # To put a file in the top-level application directory, use . as a dest_dir.
    - ""

  import-paths:
    # A path to search for imports (like using PYTHONPATH).
    # Multiple paths are allowed, separated by ':' or adding more lines.
    # Equivalent to supplying the pathex argument in the spec file.
    - "../src/wood/"

  proyect-imports:
    # Name a relative import not visible in the code of the script(s). This option can be used multiple times.
    - "xGame"
    - "game._vars"
    - "game.menus"
    - "game.menu_funcs"
    - "utils.funcs"
    - "utils.alt_funcs"
    - "utils.game_funcs"
    - "utils.thread_funcs"
    - "utils.soundpack_funcs"

  hidden-imports:
    # Name an import not visible in the code of the script(s). This option can be used multiple times.
    - "certifi"
    - #"cffi"
    - "charset_normalizer"
    - "cryptography"
    - "cryptography.fernet"
    - "idna"
    - "inflect"
    - "keyboard"
    - "pydantic"
    - "pygame"
    - "pypresence"
    - "requests"
    - "sty"
    - "typing_extensions"
    - "urllib3"

  extras: [
    # --collect-submodules MODULENAME
    #     Collect all submodules from the specified package or module. This option can be used multiple times.

    # --collect-data MODULENAME, --collect-datas MODULENAME
    #     Collect all data from the specified package or module. This option can be used multiple times.

    # --collect-binaries MODULENAME
    #    Collect all binaries from the specified package or module. This option can be used multiple times.

    # --collect-all MODULENAME
    #     Collect all submodules, data files, and binaries from the specified package or module. This option can be used multiple times.

    # --copy-metadata PACKAGENAME
    #    Copy metadata for the specified package. This option can be used multiple times.

    # --recursive-copy-metadata PACKAGENAME
    #    Copy metadata for the specified package and all its dependencies. This option can be used multiple times.

    # --additional-hooks-dir HOOKSPATH
    #    An additional path to search for hooks. This option can be used multiple times.

    # --runtime-hook RUNTIME_HOOKS
    #    Path to a custom runtime hook file. A runtime hook is code that is bundled with the executable and is executed before any other code or module to set up special features of the runtime environment. This option can be used multiple times.

    # --exclude-module EXCLUDES
    #    Optional module or package (the Python name, not the path name) that will be ignored (as though it was not found). This option can be used multiple times.

    # --splash IMAGE_FILE
    #    (EXPERIMENTAL) Add an splash screen with the image IMAGE_FILE to the application. The splash screen can display progress updates while unpacking.

    # How To Generate
    # Windows And Mac Os X Specific Options
    # Windows Specific Options
  ]

obfuscator:
  testing: true
  flags:
    automatic: true
    rename-vars: false
    protect-chunks: false
  folders:
    - "../src/wood": ""
    - "../src/wood/game": "game"
    - "../src/wood/utils": "utils"
    - "../src/wood/soundpacks": "soundpacks"