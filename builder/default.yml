# Note: The '*' character is a wildcard that matches any characters in a file name

program:
  name: "Wood"
  version: "2.0snap4-b1"
  dev-build: false
  beta-build: true

build:
  # Use the nuitka compiler instead of Pyinstaller.
  use-nuitka: false
  # Build 64-bit executables.
  # If false: Only 32-bit executables will be built.
  make-x64: false
  # Ensure the program works before building.
  test-before: true
  # Clean the build directory before building.
  auto-clean: false
  # Automatically run the built program for testing.
  auto-run: false

package:
  # Output directory for the bundled application
  output-dir: "./dist"

  # Create empty directories in the bundled application
  folders:
    - "mods"
    - "saves"

  # Exclude files and directories from the bundled application
  excluded:
    - "*.py"
    - "*.pyc"
    - "*.pyw"

  # Include files and directories in the bundled application
  included:
    - "include/*"

python:
  # Path or command to 64-bit Python executable (e.g. python.exe)
  x64: "python"
  # Path or command to 32-bit Python executable (e.g. python.exe)
  x86: "python"
  # Display progress during execution
  show-progress: true

nuitka: TODO

# https://pyinstaller.org/en/stable/usage.html#options
pyinstaller:
  cfg:
    # Name to assign to the bundled app and spec file (default: first script's basename)
    app-name: "Wood"

    # Command to use for PyInstaller. Use {python} for the Python executable
    command: "{python} -m pyinstaller"
    # Name of scriptfiles to be processed or exactly one .spec file.

    script: "../src/wood/Master.py"
    # Note: If a .spec file is specified, most options are ignored

    # Icon settings for the executable
    #   - "FILE.ico": Apply the icon to a Windows executable.
    #   - "FILE.icns": Apply the icon to a Mac OS .app bundle.
    #   - "FILE.exe,ID": Extract the icon with ID from an exe.
    #   - "Image": Apply the image to the executable with Pillow.
    #   - "NONE": Don't apply any icon, use default. (PyInstallerâ€™s icon)
    icon: "NONE"
    # [!] If Pillow installed, the icon will be translated into the correct platform format. (Windows: ico, Mac: icns)

  paths:
    # Where to put the bundled app (default: ./dist)
    output-path: "./output"
    # Where to put all the temporary work files (.log, .pyz, etc) (default: ./build)
    work-path: "./tmp"
    # Where to store the generated spec file (default: current directory)
    spec-path: "./spec"
    # (ONE-DIR) Where to store all supporting files (everything except the executable itself).
    contents-dir: "./library"
    # Note: Use "." to use old ONE-DIR layout without a contents directory

  options:
    # Clean PyInstaller cache and remove temporary files before building.
    clean: true
    # Replace previous output without asking for confirmation.
    no-confirm: false
    # Bundle the application into a single executable file.
    onefile-mode: false
    # Set the verbosity level for build-time console messages
    # Levels: (TRACE, DEBUG, INFO, WARN, DEPRECATION, ERROR, FATAL)
    log-level: INFO

  # Additional data files or directories containing data files to be added to the application.
  # Format: "SOURCE:DEST_DIR"
  #   - SOURCE: Path to the file or directory to include
  #   - DEST_DIR: Destination directory within the application (use "." for top-level directory)
  extra-data: []

  # Additional binary files to be added to the executable.
  # Format: "SOURCE:DEST_DIR"
  #   - SOURCE: Path to the file to include
  #   - DEST_DIR: Destination directory within the application (use "." for top-level directory)
  extra-binary: []

  # Additional import paths for PyInstaller to search for modules (equivalent to PYTHONPATH)
  # Multiple paths are allowed, separated by ':' or adding more lines.
  import-paths:
    - "../src/wood/"

  # Specify relative imports not visible in the code.
  proyect-imports:
    - "xGame"
    - "data._vars"
    - "data._code"
    - "data.initialize"
    - "game.menus.actions"
    - "game.menus.extras"
    - "game.menus.managing"
    - "game.menus.primary"
    - "game.logic.car"
    - "game.logic.mine"
    - "utils.funcs"
    - "utils.alt_funcs"
    - "utils.game_funcs"
    - "utils.soundpack_funcs"
    - "utils.thread_funcs"
    - "utils.cmd.normal"
    - "utils.cmd.debug"
    - "utils.cmd.dev"
    - "utils.manager.audio_man"
    - "utils.manager.config_man"
    - "utils.manager.mod_man"
    - "utils.manager.save_man"
    - "utils.libs.unique_man"

  # Specify hidden imports not visible in the code.
  hidden-imports:
    - "certifi"
    - #"cffi"
    - "charset_normalizer"
    - "cryptography"
    - "cryptography.fernet"
    - "idna"
    - "inflect"
    - "keyboard"
    - "pydantic"
    - "pygame"
    - "pypresence"
    - "requests"
    - "sty"
    - "typing_extensions"
    - "urllib3"

  extras: []

obfuscator:
  # Test the resulting obfuscated code.
  testing: true
  # The obfuscated code will be saved to this directory
  output-dir: "./obfuscated"
  # Retry the obfuscation process if it fails
  # [!] This can increase the execution time of the obfuscation process or run into a loop.
  retry: true
  flags:
    # Removes requirement of input to exit.
    automatic: true
    # Use this if you want to redefine the variables
    # [!] Be aware that this can cause some bugs on very complex scripts, but generally it should work
    rename-vars: false
    # Use this if you have variable defined on multiple lines
    # Use this to prevent adding a shell to each chunk in your script
    protect-chunks: true
  # Where to search for scripts, and their relative destination.
  folders:
    - "../src/wood": ""
    - "../src/wood/data": "data"
    - "../src/wood/game": "game"
    - "../src/wood/game/menus": "game/menus"
    - "../src/wood/game/logic": "game/logic"
    - "../src/wood/game/rooms": "game/rooms"
    - "../src/wood/utils": "utils"
    - "../src/wood/utils/cmd": "utils/cmd"
    - "../src/wood/utils/manager": "utils/manager"
    - "../src/wood/utils/libs": "utils/libs"